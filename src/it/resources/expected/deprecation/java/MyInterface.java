// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from deprecation.djinni

package djinni.it;

import java.util.concurrent.atomic.AtomicBoolean;

/**
 * interface comment
 *
 * @deprecated Use someother interface
 */
@Deprecated
public abstract class MyInterface {
    /** @deprecated Use someother constant */
    @Deprecated
    public static final int VERSION = 1;

    /** @deprecated Use someother method */
    @Deprecated
    public abstract void methodA(int value);

    /** @deprecated Use someother method */
    @Deprecated
    public abstract void methodB(int value);

    /** not deprecated */
    public abstract void methodD();

    /** really im not */
    public abstract void methodE();

    /** @deprecated Use someother method */
    @Deprecated
    public static void methodC(int value)
    {
        CppProxy.methodC(value);
    }

    private static final class CppProxy extends MyInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        @SuppressWarnings("deprecation")
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void methodA(int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_methodA(this.nativeRef, value);
        }
        private native void native_methodA(long _nativeRef, int value);

        @Override
        public void methodB(int value)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_methodB(this.nativeRef, value);
        }
        private native void native_methodB(long _nativeRef, int value);

        @Override
        public void methodD()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_methodD(this.nativeRef);
        }
        private native void native_methodD(long _nativeRef);

        @Override
        public void methodE()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_methodE(this.nativeRef);
        }
        private native void native_methodE(long _nativeRef);

        public static native void methodC(int value);
    }
}
